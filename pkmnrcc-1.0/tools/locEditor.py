#!/usr/bin/python3.6
import subprocess
import sys
from PyQt5.QtCore import *
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *

WIN_WIDTH = 1920
WIN_HEIGTH = 700

def get_screen_res():
    cmd = ['xrandr']
    cmd2 = ['grep', '*']
    p = subprocess.Popen(cmd, stdout=subprocess.PIPE)
    p2 = subprocess.Popen(cmd2, stdin=p.stdout, stdout=subprocess.PIPE)
    p.stdout.close()
    resolution_string, junk = p2.communicate()
    resolution = resolution_string.split()[0]
    resolution = resolution.decode("utf-8")
    width, height = resolution.split('x')
    return width,height

class Window(QScrollArea):
    def __init__(self):
        super(Window,self).__init__()

        # MAIN LAYOUT and WINDOW SETTINGS
        widget = QWidget()
        layout = QVBoxLayout(widget)
        self.setWidget(widget)
        self.setGeometry((int(get_screen_res()[0])-WIN_WIDTH)/2,(int(get_screen_res()[1])-WIN_HEIGTH)/2,WIN_WIDTH,WIN_HEIGTH)
        self.setWidgetResizable(True)
        self.setWindowTitle("Location Editor")
        self.setStyleSheet("background-color:#D0D0D0;") 

        # FIRST HBOX ABOUT MAP NAME
        hb1 = QHBoxLayout()
        l1hb1 = QLabel(" Map name")
        hb1.addWidget(l1hb1)
        self.le1hb1 = QLineEdit()
        self.le1hb1.setStyleSheet("background-color:#E8E8E8;")
        hb1.addWidget(self.le1hb1)
        hb1.addStretch(1)
        self.bsave = QPushButton("Save")
        self.bsave.setStyleSheet("background-color:#23DD00;")
        self.bsave.clicked.connect(self.save)
        hb1.addWidget(self.bsave)
        layout.addLayout(hb1)

        # SECOND HBOX ABOUT STEP SIZE 
        hb2 = QHBoxLayout()
        l1hb2 = QLabel("Step size")
        hb2.addWidget(l1hb2)
        self.le1hb2 = QLineEdit()
        self.le1hb2.setStyleSheet("background-color:#E8E8E8;")
        self.le1hb2.setFixedWidth(30)
        self.le1hb2.setText("64")
        hb2.addWidget(self.le1hb2)
        hb2.addStretch(1)
        layout.addLayout(hb2)

        # THIRD HBOX ABOUT MAPS
        spacer = QSpacerItem(50, 0, QSizePolicy.Minimum, QSizePolicy.Expanding)
        hb3 = QHBoxLayout()
        vb1hb3 = QVBoxLayout()
        hb3.addLayout(vb1hb3)
        hb3.addItem(spacer)
        vb2hb3 = QVBoxLayout()
        hb3.addLayout(vb2hb3)
        hb3.addItem(spacer)
        vb3hb3 = QVBoxLayout()
        hb3.addLayout(vb3hb3)
        hb3.addItem(spacer)
        vb4hb3 = QVBoxLayout()
        hb3.addLayout(vb4hb3)
        hb3.addItem(spacer)
        vb5hb3 = QVBoxLayout()
        hb3.addLayout(vb5hb3)
        layout.addLayout(hb3)

        # TITLE OF VBOX1
        hb0vb1hb3 = QHBoxLayout()
        lhb0vb1hb3 = QLabel("Map")
        font = lhb0vb1hb3.font()
        font.setBold(True)
        lhb0vb1hb3.setFont(font)
        hb0vb1hb3.addStretch(1)
        hb0vb1hb3.addWidget(lhb0vb1hb3)
        hb0vb1hb3.addStretch(1)
        vb1hb3.addLayout(hb0vb1hb3)
        # FIRST HBOX INSIDE VBOX1 ABOUT THE HEIGHT OF THE CENTRAL MAP
        hb1vb1hb3 = QHBoxLayout()
        lhb1vb1hb3 = QLabel("height")
        hb1vb1hb3.addStretch(1)
        hb1vb1hb3.addWidget(lhb1vb1hb3)
        self.lehb1vb1hb3 = QLineEdit()
        self.lehb1vb1hb3.setStyleSheet("background-color:#E8E8E8;")
        self.lehb1vb1hb3.setFixedWidth(30)
        hb1vb1hb3.addWidget(self.lehb1vb1hb3)
        hb1vb1hb3.addStretch(1)
        vb1hb3.addLayout(hb1vb1hb3)
        # SECOND HBOX INSIDE VBOX1 ABOUT THE WIDTH OF THE CENTRAL MAP
        hb2vb1hb3 = QHBoxLayout()
        lhb2vb1hb3 = QLabel(" width")
        hb2vb1hb3.addStretch(1)
        hb2vb1hb3.addWidget(lhb2vb1hb3)
        self.lehb2vb1hb3 = QLineEdit()
        self.lehb2vb1hb3.setStyleSheet("background-color:#E8E8E8;")
        self.lehb2vb1hb3.setFixedWidth(30)
        hb2vb1hb3.addWidget(self.lehb2vb1hb3)
        hb2vb1hb3.addStretch(1)
        vb1hb3.addLayout(hb2vb1hb3)
        # THIRD HBOX INSIDE VBOX1 ABOUT THE BUTTON TO ADD ENTITIES IN THE CENTRAL MAP
        hb3vb1hb3 = QHBoxLayout()
        btnicon  = QIcon('../assets/images/plus-sign.png')
        bhb3vb1hb3 = QPushButton()
        bhb3vb1hb3.setIcon(btnicon)
        bhb3vb1hb3.setStyleSheet("QPushButton::hover{background-color:#93f792;}") 
        self.nentcentralmap = 0
        self.grid1 = QGridLayout()
        bhb3vb1hb3.clicked.connect(self.bhb3vb1hb3_clicked)
        hb3vb1hb3.addWidget(bhb3vb1hb3)
        hb3vb1hb3.addStretch(1)
        l1hb3vb1hb3 = QLabel("Name")
        hb3vb1hb3.addWidget(l1hb3vb1hb3)
        hb3vb1hb3.addStretch(5)
        l2hb3vb1hb3 = QLabel("X")
        hb3vb1hb3.addWidget(l2hb3vb1hb3)
        hb3vb1hb3.addStretch(1)
        l3hb3vb1hb3 = QLabel("Y")
        hb3vb1hb3.addWidget(l3hb3vb1hb3)
        hb3vb1hb3.addStretch(1)
        l4hb3vb1hb3 = QLabel("I")
        hb3vb1hb3.addWidget(l4hb3vb1hb3)
        hb3vb1hb3.addStretch(1)
        l5hb3vb1hb3 = QLabel("W")
        hb3vb1hb3.addWidget(l5hb3vb1hb3)
        hb3vb1hb3.addStretch(1)
        l6hb3vb1hb3 = QLabel("H")
        hb3vb1hb3.addWidget(l6hb3vb1hb3)
        hb3vb1hb3.addStretch(1)
        vb1hb3.addLayout(hb3vb1hb3)
        vb1hb3.addLayout(self.grid1)
        vb1hb3.addStretch(1)

        # TITLE OF VBOX2
        hb0vb2hb3 = QHBoxLayout()
        lhb0vb2hb3 = QLabel("Left Map")
        font = lhb0vb2hb3.font()
        font.setBold(True)
        lhb0vb2hb3.setFont(font)
        hb0vb2hb3.addStretch(1)
        hb0vb2hb3.addWidget(lhb0vb2hb3)
        self.lehb0vb2hb3 = QLineEdit()
        self.lehb0vb2hb3.setStyleSheet("background-color:#E8E8E8;")
        self.lehb0vb2hb3.setFixedWidth(150)
        hb0vb2hb3.addWidget(self.lehb0vb2hb3)
        hb0vb2hb3.addStretch(1)
        vb2hb3.addLayout(hb0vb2hb3)
        # FIRST HBOX INSIDE VBOX2 ABOUT THE HEIGHT OF THE LEFT MAP
        hb1vb2hb3 = QHBoxLayout()
        lhb1vb2hb3 = QLabel("height")
        hb1vb2hb3.addStretch(1)
        hb1vb2hb3.addWidget(lhb1vb2hb3)
        self.lehb1vb2hb3 = QLineEdit()
        self.lehb1vb2hb3.setStyleSheet("background-color:#E8E8E8;")
        self.lehb1vb2hb3.setFixedWidth(30)
        hb1vb2hb3.addWidget(self.lehb1vb2hb3)
        hb1vb2hb3.addStretch(1)
        vb2hb3.addLayout(hb1vb2hb3)
        # SECOND HBOX INSIDE VBOX2 ABOUT THE WIDTH OF THE LEFT MAP
        hb2vb2hb3 = QHBoxLayout()
        lhb2vb2hb3 = QLabel(" width")
        hb2vb2hb3.addStretch(1)
        hb2vb2hb3.addWidget(lhb2vb2hb3)
        self.lehb2vb2hb3 = QLineEdit()
        self.lehb2vb2hb3.setStyleSheet("background-color:#E8E8E8;")
        self.lehb2vb2hb3.setFixedWidth(30)
        hb2vb2hb3.addWidget(self.lehb2vb2hb3)
        hb2vb2hb3.addStretch(1)
        vb2hb3.addLayout(hb2vb2hb3)
        # THIRD HBOX INSIDE VBOX2 ABOUT THE YOFF OF THE LEFT MAP
        hb3vb2hb3 = QHBoxLayout()
        lhb3vb2hb3 = QLabel("  yoff")
        hb3vb2hb3.addStretch(1)
        hb3vb2hb3.addWidget(lhb3vb2hb3)
        self.lehb3vb2hb3 = QLineEdit()
        self.lehb3vb2hb3.setStyleSheet("background-color:#E8E8E8;")
        self.lehb3vb2hb3.setFixedWidth(30)
        hb3vb2hb3.addWidget(self.lehb3vb2hb3)
        hb3vb2hb3.addStretch(1)
        vb2hb3.addLayout(hb3vb2hb3)
        # THIRD HBOX INSIDE VBOX2 ABOUT THE BUTTON TO ADD ENTITIES IN THE LEFT MAP
        hb3vb2hb3 = QHBoxLayout()
        btnicon  = QIcon('../assets/images/plus-sign.png')
        bhb3vb2hb3 = QPushButton()
        bhb3vb2hb3.setIcon(btnicon)
        bhb3vb2hb3.setStyleSheet("QPushButton::hover{background-color:#93f792;}") 
        self.nentleftmap = 0
        self.grid2 = QGridLayout()
        bhb3vb2hb3.clicked.connect(self.bhb3vb2hb3_clicked)
        hb3vb2hb3.addWidget(bhb3vb2hb3)
        hb3vb2hb3.addStretch(1)
        l1hb3vb2hb3 = QLabel("Name")
        hb3vb2hb3.addWidget(l1hb3vb2hb3)
        hb3vb2hb3.addStretch(5)
        l2hb3vb2hb3 = QLabel("X")
        hb3vb2hb3.addWidget(l2hb3vb2hb3)
        hb3vb2hb3.addStretch(1)
        l3hb3vb2hb3 = QLabel("Y")
        hb3vb2hb3.addWidget(l3hb3vb2hb3)
        hb3vb2hb3.addStretch(1)
        l4hb3vb2hb3 = QLabel("I")
        hb3vb2hb3.addWidget(l4hb3vb2hb3)
        hb3vb2hb3.addStretch(1)
        l5hb3vb2hb3 = QLabel("W")
        hb3vb2hb3.addWidget(l5hb3vb2hb3)
        hb3vb2hb3.addStretch(1)
        l6hb3vb2hb3 = QLabel("H")
        hb3vb2hb3.addWidget(l6hb3vb2hb3)
        hb3vb2hb3.addStretch(1)
        vb2hb3.addLayout(hb3vb2hb3)
        vb2hb3.addLayout(self.grid2)
        vb2hb3.addStretch(1)

        # TITLE OF VBOX3
        hb0vb3hb3 = QHBoxLayout()
        lhb0vb3hb3 = QLabel("Down Map")
        font = lhb0vb3hb3.font()
        font.setBold(True)
        lhb0vb3hb3.setFont(font)
        hb0vb3hb3.addStretch(1)
        hb0vb3hb3.addWidget(lhb0vb3hb3)
        self.lehb0vb3hb3 = QLineEdit()
        self.lehb0vb3hb3.setStyleSheet("background-color:#E8E8E8;")
        self.lehb0vb3hb3.setFixedWidth(150)
        hb0vb3hb3.addWidget(self.lehb0vb3hb3)
        hb0vb3hb3.addStretch(1)
        vb3hb3.addLayout(hb0vb3hb3)
        # FIRST HBOX INSIDE VBOX3 ABOUT THE HEIGHT OF THE DOWN MAP
        hb1vb3hb3 = QHBoxLayout()
        lhb1vb3hb3 = QLabel("height")
        hb1vb3hb3.addStretch(1)
        hb1vb3hb3.addWidget(lhb1vb3hb3)
        self.lehb1vb3hb3 = QLineEdit()
        self.lehb1vb3hb3.setStyleSheet("background-color:#E8E8E8;")
        self.lehb1vb3hb3.setFixedWidth(30)
        hb1vb3hb3.addWidget(self.lehb1vb3hb3)
        hb1vb3hb3.addStretch(1)
        vb3hb3.addLayout(hb1vb3hb3)
        # SECOND HBOX INSIDE VBOX3 ABOUT THE WIDTH OF THE DOWN MAP
        hb2vb3hb3 = QHBoxLayout()
        lhb2vb3hb3 = QLabel(" width")
        hb2vb3hb3.addStretch(1)
        hb2vb3hb3.addWidget(lhb2vb3hb3)
        self.lehb2vb3hb3 = QLineEdit()
        self.lehb2vb3hb3.setStyleSheet("background-color:#E8E8E8;")
        self.lehb2vb3hb3.setFixedWidth(30)
        hb2vb3hb3.addWidget(self.lehb2vb3hb3)
        hb2vb3hb3.addStretch(1)
        vb3hb3.addLayout(hb2vb3hb3)
        # THIRD HBOX INSIDE VBOX3 ABOUT THE XOFF OF THE DOWN MAP
        hb3vb3hb3 = QHBoxLayout()
        lhb3vb3hb3 = QLabel("  xoff")
        hb3vb3hb3.addStretch(1)
        hb3vb3hb3.addWidget(lhb3vb3hb3)
        self.lehb3vb3hb3 = QLineEdit()
        self.lehb3vb3hb3.setStyleSheet("background-color:#E8E8E8;")
        self.lehb3vb3hb3.setFixedWidth(30)
        hb3vb3hb3.addWidget(self.lehb3vb3hb3)
        hb3vb3hb3.addStretch(1)
        vb3hb3.addLayout(hb3vb3hb3)
        # THIRD HBOX INSIDE VBOX3 ABOUT THE BUTTON TO ADD ENTITIES IN THE DOWN MAP
        hb3vb3hb3 = QHBoxLayout()
        btnicon  = QIcon('../assets/images/plus-sign.png')
        bhb3vb3hb3 = QPushButton()
        bhb3vb3hb3.setIcon(btnicon)
        bhb3vb3hb3.setStyleSheet("QPushButton::hover{background-color:#93f792;}") 
        self.nentdownmap = 0
        self.grid3 = QGridLayout()
        bhb3vb3hb3.clicked.connect(self.bhb3vb3hb3_clicked)
        hb3vb3hb3.addWidget(bhb3vb3hb3)
        hb3vb3hb3.addStretch(1)
        l1hb3vb3hb3 = QLabel("Name")
        hb3vb3hb3.addWidget(l1hb3vb3hb3)
        hb3vb3hb3.addStretch(5)
        l2hb3vb3hb3 = QLabel("X")
        hb3vb3hb3.addWidget(l2hb3vb3hb3)
        hb3vb3hb3.addStretch(1)
        l3hb3vb3hb3 = QLabel("Y")
        hb3vb3hb3.addWidget(l3hb3vb3hb3)
        hb3vb3hb3.addStretch(1)
        l4hb3vb3hb3 = QLabel("I")
        hb3vb3hb3.addWidget(l4hb3vb3hb3)
        hb3vb3hb3.addStretch(1)
        l5hb3vb3hb3 = QLabel("W")
        hb3vb3hb3.addWidget(l5hb3vb3hb3)
        hb3vb3hb3.addStretch(1)
        l6hb3vb3hb3 = QLabel("H")
        hb3vb3hb3.addWidget(l6hb3vb3hb3)
        hb3vb3hb3.addStretch(1)
        vb3hb3.addLayout(hb3vb3hb3)
        vb3hb3.addLayout(self.grid3)
        vb3hb3.addStretch(1)

        # TITLE OF VBOX4
        hb0vb4hb3 = QHBoxLayout()
        lhb0vb4hb3 = QLabel("Right Map")
        font = lhb0vb4hb3.font()
        font.setBold(True)
        lhb0vb4hb3.setFont(font)
        hb0vb4hb3.addStretch(1)
        hb0vb4hb3.addWidget(lhb0vb4hb3)
        self.lehb0vb4hb3 = QLineEdit()
        self.lehb0vb4hb3.setStyleSheet("background-color:#E8E8E8;")
        self.lehb0vb4hb3.setFixedWidth(150)
        hb0vb4hb3.addWidget(self.lehb0vb4hb3)
        hb0vb4hb3.addStretch(1)
        vb4hb3.addLayout(hb0vb4hb3)
        # FIRST HBOX INSIDE VBOX4 ABOUT THE HEIGHT OF THE RIGHT MAP
        hb1vb4hb3 = QHBoxLayout()
        lhb1vb4hb3 = QLabel("height")
        hb1vb4hb3.addStretch(1)
        hb1vb4hb3.addWidget(lhb1vb4hb3)
        self.lehb1vb4hb3 = QLineEdit()
        self.lehb1vb4hb3.setStyleSheet("background-color:#E8E8E8;")
        self.lehb1vb4hb3.setFixedWidth(30)
        hb1vb4hb3.addWidget(self.lehb1vb4hb3)
        hb1vb4hb3.addStretch(1)
        vb4hb3.addLayout(hb1vb4hb3)
        # SECOND HBOX INSIDE VBOX4 ABOUT THE WIDTH OF THE RIGHT MAP
        hb2vb4hb3 = QHBoxLayout()
        lhb2vb4hb3 = QLabel(" width")
        hb2vb4hb3.addStretch(1)
        hb2vb4hb3.addWidget(lhb2vb4hb3)
        self.lehb2vb4hb3 = QLineEdit()
        self.lehb2vb4hb3.setStyleSheet("background-color:#E8E8E8;")
        self.lehb2vb4hb3.setFixedWidth(30)
        hb2vb4hb3.addWidget(self.lehb2vb4hb3)
        hb2vb4hb3.addStretch(1)
        vb4hb3.addLayout(hb2vb4hb3)
        # THIRD HBOX INSIDE VBOX4 ABOUT THE YOFF OF THE RIGHT MAP
        hb3vb4hb3 = QHBoxLayout()
        lhb3vb4hb3 = QLabel("  yoff")
        hb3vb4hb3.addStretch(1)
        hb3vb4hb3.addWidget(lhb3vb4hb3)
        self.lehb3vb4hb3 = QLineEdit()
        self.lehb3vb4hb3.setStyleSheet("background-color:#E8E8E8;")
        self.lehb3vb4hb3.setFixedWidth(30)
        hb3vb4hb3.addWidget(self.lehb3vb4hb3)
        hb3vb4hb3.addStretch(1)
        vb4hb3.addLayout(hb3vb4hb3)
        # THIRD HBOX INSIDE VBOX3 ABOUT THE BUTTON TO ADD ENTITIES IN THE RIGHT MAP
        hb3vb4hb3 = QHBoxLayout()
        btnicon  = QIcon('../assets/images/plus-sign.png')
        bhb3vb4hb3 = QPushButton()
        bhb3vb4hb3.setIcon(btnicon)
        bhb3vb4hb3.setStyleSheet("QPushButton::hover{background-color:#93f792;}") 
        self.nentrightmap = 0
        self.grid4 = QGridLayout()
        bhb3vb4hb3.clicked.connect(self.bhb3vb4hb3_clicked)
        hb3vb4hb3.addWidget(bhb3vb4hb3)
        hb3vb4hb3.addStretch(1)
        l1hb3vb4hb3 = QLabel("Name")
        hb3vb4hb3.addWidget(l1hb3vb4hb3)
        hb3vb4hb3.addStretch(5)
        l2hb3vb4hb3 = QLabel("X")
        hb3vb4hb3.addWidget(l2hb3vb4hb3)
        hb3vb4hb3.addStretch(1)
        l3hb3vb4hb3 = QLabel("Y")
        hb3vb4hb3.addWidget(l3hb3vb4hb3)
        hb3vb4hb3.addStretch(1)
        l4hb3vb4hb3 = QLabel("I")
        hb3vb4hb3.addWidget(l4hb3vb4hb3)
        hb3vb4hb3.addStretch(1)
        l5hb3vb4hb3 = QLabel("W")
        hb3vb4hb3.addWidget(l5hb3vb4hb3)
        hb3vb4hb3.addStretch(1)
        l6hb3vb4hb3 = QLabel("H")
        hb3vb4hb3.addWidget(l6hb3vb4hb3)
        hb3vb4hb3.addStretch(1)
        vb4hb3.addLayout(hb3vb4hb3)
        vb4hb3.addLayout(self.grid4)
        vb4hb3.addStretch(1)

        # TITLE OF VBOX5
        hb0vb5hb3 = QHBoxLayout()
        lhb0vb5hb3 = QLabel("Up Map")
        font = lhb0vb5hb3.font()
        font.setBold(True)
        lhb0vb5hb3.setFont(font)
        hb0vb5hb3.addStretch(1)
        hb0vb5hb3.addWidget(lhb0vb5hb3)
        self.lehb0vb5hb3 = QLineEdit()
        self.lehb0vb5hb3.setStyleSheet("background-color:#E8E8E8;")
        self.lehb0vb5hb3.setFixedWidth(150)
        hb0vb5hb3.addWidget(self.lehb0vb5hb3)
        hb0vb5hb3.addStretch(1)
        vb5hb3.addLayout(hb0vb5hb3)
        # FIRST HBOX INSIDE VBOX5 ABOUT THE HEIGHT OF THE UP MAP
        hb1vb5hb3 = QHBoxLayout()
        lhb1vb5hb3 = QLabel("height")
        hb1vb5hb3.addStretch(1)
        hb1vb5hb3.addWidget(lhb1vb5hb3)
        self.lehb1vb5hb3 = QLineEdit()
        self.lehb1vb5hb3.setStyleSheet("background-color:#E8E8E8;")
        self.lehb1vb5hb3.setFixedWidth(30)
        hb1vb5hb3.addWidget(self.lehb1vb5hb3)
        hb1vb5hb3.addStretch(1)
        vb5hb3.addLayout(hb1vb5hb3)
        # SECOND HBOX INSIDE VBOX5 ABOUT THE WIDTH OF THE UP MAP
        hb2vb5hb3 = QHBoxLayout()
        lhb2vb5hb3 = QLabel(" width")
        hb2vb5hb3.addStretch(1)
        hb2vb5hb3.addWidget(lhb2vb5hb3)
        self.lehb2vb5hb3 = QLineEdit()
        self.lehb2vb5hb3.setStyleSheet("background-color:#E8E8E8;")
        self.lehb2vb5hb3.setFixedWidth(30)
        hb2vb5hb3.addWidget(self.lehb2vb5hb3)
        hb2vb5hb3.addStretch(1)
        vb5hb3.addLayout(hb2vb5hb3)
        # THIRD HBOX INSIDE VBOX5 ABOUT THE XOFF OF THE UP MAP
        hb3vb5hb3 = QHBoxLayout()
        lhb3vb5hb3 = QLabel("  xoff")
        hb3vb5hb3.addStretch(1)
        hb3vb5hb3.addWidget(lhb3vb5hb3)
        self.lehb3vb5hb3 = QLineEdit()
        self.lehb3vb5hb3.setStyleSheet("background-color:#E8E8E8;")
        self.lehb3vb5hb3.setFixedWidth(30)
        hb3vb5hb3.addWidget(self.lehb3vb5hb3)
        hb3vb5hb3.addStretch(1)
        vb5hb3.addLayout(hb3vb5hb3)
        # THIRD HBOX INSIDE VBOX5 ABOUT THE BUTTON TO ADD ENTITIES IN THE UP MAP
        hb3vb5hb3 = QHBoxLayout()
        btnicon  = QIcon('../assets/images/plus-sign.png')
        bhb3vb5hb3 = QPushButton()
        bhb3vb5hb3.setIcon(btnicon)
        bhb3vb5hb3.setStyleSheet("QPushButton::hover{background-color:#93f792;}") 
        self.nentupmap = 0
        self.grid5 = QGridLayout()
        bhb3vb5hb3.clicked.connect(self.bhb3vb5hb3_clicked)
        hb3vb5hb3.addWidget(bhb3vb5hb3)
        hb3vb5hb3.addStretch(1)
        l1hb3vb5hb3 = QLabel("Name")
        hb3vb5hb3.addWidget(l1hb3vb5hb3)
        hb3vb5hb3.addStretch(5)
        l2hb3vb5hb3 = QLabel("X")
        hb3vb5hb3.addWidget(l2hb3vb5hb3)
        hb3vb5hb3.addStretch(1)
        l3hb3vb5hb3 = QLabel("Y")
        hb3vb5hb3.addWidget(l3hb3vb5hb3)
        hb3vb5hb3.addStretch(1)
        l4hb3vb5hb3 = QLabel("I")
        hb3vb5hb3.addWidget(l4hb3vb5hb3)
        hb3vb5hb3.addStretch(1)
        l5hb3vb5hb3 = QLabel("W")
        hb3vb5hb3.addWidget(l5hb3vb5hb3)
        hb3vb5hb3.addStretch(1)
        l6hb3vb5hb3 = QLabel("H")
        hb3vb5hb3.addWidget(l6hb3vb5hb3)
        hb3vb5hb3.addStretch(1)
        vb5hb3.addLayout(hb3vb5hb3)
        vb5hb3.addLayout(self.grid5)
        vb5hb3.addStretch(1)

    def bhb3vb1hb3_clicked(self):
        exec(f'self.cb{self.nentcentralmap}vb1 = QCheckBox()')
        exec(f'self.cb{self.nentcentralmap}vb1.setStyleSheet("QCheckBox::indicator {{ width : 10px; height : 10px;}}")')
        exec(f'self.cb{self.nentcentralmap}vb1.setToolTip("Select to make this entity static")')
        exec(f'self.grid1.addWidget(self.cb{self.nentcentralmap}vb1,self.nentcentralmap,0)')
        exec(f'self.l{self.nentcentralmap}vb1 = QLabel("{self.nentcentralmap}")')
        exec(f'self.l{self.nentcentralmap}vb1.setFixedWidth(20)')
        exec(f'self.grid1.addWidget(self.l{self.nentcentralmap}vb1,self.nentcentralmap,1)')
        exec(f'self.le{self.nentcentralmap}1vb1 = QLineEdit()')
        exec(f'self.le{self.nentcentralmap}1vb1.setStyleSheet("background-color:#E8E8E8;")')
        exec(f'self.le{self.nentcentralmap}1vb1.setFixedWidth(127)')
        exec(f'self.grid1.addWidget(self.le{self.nentcentralmap}1vb1,self.nentcentralmap,2)')
        exec(f'self.le{self.nentcentralmap}2vb1 = QLineEdit()')
        exec(f'self.le{self.nentcentralmap}2vb1.setStyleSheet("background-color:#E8E8E8;")')
        exec(f'self.le{self.nentcentralmap}2vb1.setFixedWidth(30)')
        exec(f'self.grid1.addWidget(self.le{self.nentcentralmap}2vb1,self.nentcentralmap,3)')
        exec(f'self.le{self.nentcentralmap}3vb1 = QLineEdit()')
        exec(f'self.le{self.nentcentralmap}3vb1.setStyleSheet("background-color:#E8E8E8;")')
        exec(f'self.le{self.nentcentralmap}3vb1.setFixedWidth(30)')
        exec(f'self.grid1.addWidget(self.le{self.nentcentralmap}3vb1,self.nentcentralmap,4)')
        exec(f'self.le{self.nentcentralmap}4vb1 = QLineEdit()')
        exec(f'self.le{self.nentcentralmap}4vb1.setStyleSheet("background-color:#E8E8E8;")')
        exec(f'self.le{self.nentcentralmap}4vb1.setFixedWidth(20)')
        exec(f'self.grid1.addWidget(self.le{self.nentcentralmap}4vb1,self.nentcentralmap,5)')
        exec(f'self.le{self.nentcentralmap}5vb1 = QLineEdit()')
        exec(f'self.le{self.nentcentralmap}5vb1.setStyleSheet("background-color:#E8E8E8;")')
        exec(f'self.le{self.nentcentralmap}5vb1.setFixedWidth(30)')
        exec(f'self.grid1.addWidget(self.le{self.nentcentralmap}5vb1,self.nentcentralmap,6)')
        exec(f'self.le{self.nentcentralmap}6vb1 = QLineEdit()')
        exec(f'self.le{self.nentcentralmap}6vb1.setStyleSheet("background-color:#E8E8E8;")')
        exec(f'self.le{self.nentcentralmap}6vb1.setFixedWidth(30)')
        exec(f'self.grid1.addWidget(self.le{self.nentcentralmap}6vb1,self.nentcentralmap,7)')
        self.nentcentralmap = self.nentcentralmap + 1

    def bhb3vb2hb3_clicked(self):
        exec(f'self.cb{self.nentleftmap}vb2 = QCheckBox()')
        exec(f'self.cb{self.nentleftmap}vb2.setStyleSheet("QCheckBox::indicator {{ width : 10px; height : 10px;}}")')
        exec(f'self.cb{self.nentleftmap}vb2.setToolTip("Select to make this entity static")')
        exec(f'self.grid2.addWidget(self.cb{self.nentleftmap}vb2,self.nentleftmap,0)')
        exec(f'self.l{self.nentleftmap}vb2 = QLabel("{self.nentleftmap}")')
        exec(f'self.l{self.nentleftmap}vb2.setFixedWidth(20)')
        exec(f'self.grid2.addWidget(self.l{self.nentleftmap}vb2,self.nentleftmap,1)')
        exec(f'self.le{self.nentleftmap}1vb2 = QLineEdit()')
        exec(f'self.le{self.nentleftmap}1vb2.setStyleSheet("background-color:#E8E8E8;")')
        exec(f'self.le{self.nentleftmap}1vb2.setFixedWidth(127)')
        exec(f'self.grid2.addWidget(self.le{self.nentleftmap}1vb2,self.nentleftmap,2)')
        exec(f'self.le{self.nentleftmap}2vb2 = QLineEdit()')
        exec(f'self.le{self.nentleftmap}2vb2.setStyleSheet("background-color:#E8E8E8;")')
        exec(f'self.le{self.nentleftmap}2vb2.setFixedWidth(30)')
        exec(f'self.grid2.addWidget(self.le{self.nentleftmap}2vb2,self.nentleftmap,3)')
        exec(f'self.le{self.nentleftmap}3vb2 = QLineEdit()')
        exec(f'self.le{self.nentleftmap}3vb2.setStyleSheet("background-color:#E8E8E8;")')
        exec(f'self.le{self.nentleftmap}3vb2.setFixedWidth(30)')
        exec(f'self.grid2.addWidget(self.le{self.nentleftmap}3vb2,self.nentleftmap,4)')
        exec(f'self.le{self.nentleftmap}4vb2 = QLineEdit()')
        exec(f'self.le{self.nentleftmap}4vb2.setStyleSheet("background-color:#E8E8E8;")')
        exec(f'self.le{self.nentleftmap}4vb2.setFixedWidth(20)')
        exec(f'self.grid2.addWidget(self.le{self.nentleftmap}4vb2,self.nentleftmap,5)')
        exec(f'self.le{self.nentleftmap}5vb2 = QLineEdit()')
        exec(f'self.le{self.nentleftmap}5vb2.setStyleSheet("background-color:#E8E8E8;")')
        exec(f'self.le{self.nentleftmap}5vb2.setFixedWidth(30)')
        exec(f'self.grid2.addWidget(self.le{self.nentleftmap}5vb2,self.nentleftmap,6)')
        exec(f'self.le{self.nentleftmap}6vb2 = QLineEdit()')
        exec(f'self.le{self.nentleftmap}6vb2.setStyleSheet("background-color:#E8E8E8;")')
        exec(f'self.le{self.nentleftmap}6vb2.setFixedWidth(30)')
        exec(f'self.grid2.addWidget(self.le{self.nentleftmap}6vb2,self.nentleftmap,7)')
        self.nentleftmap = self.nentleftmap + 1

    def bhb3vb3hb3_clicked(self):
        exec(f'self.cb{self.nentdownmap}vb3 = QCheckBox()')
        exec(f'self.cb{self.nentdownmap}vb3.setStyleSheet("QCheckBox::indicator {{ width : 10px; height : 10px;}}")')
        exec(f'self.cb{self.nentdownmap}vb3.setToolTip("Select to make this entity static")')
        exec(f'self.grid3.addWidget(self.cb{self.nentdownmap}vb3,self.nentdownmap,0)')
        exec(f'self.l{self.nentdownmap}vb3 = QLabel("{self.nentdownmap}")')
        exec(f'self.l{self.nentdownmap}vb3.setFixedWidth(20)')
        exec(f'self.grid3.addWidget(self.l{self.nentdownmap}vb3,self.nentdownmap,1)')
        exec(f'self.le{self.nentdownmap}1vb3 = QLineEdit()')
        exec(f'self.le{self.nentdownmap}1vb3.setStyleSheet("background-color:#E8E8E8;")')
        exec(f'self.le{self.nentdownmap}1vb3.setFixedWidth(127)')
        exec(f'self.grid3.addWidget(self.le{self.nentdownmap}1vb3,self.nentdownmap,2)')
        exec(f'self.le{self.nentdownmap}2vb3 = QLineEdit()')
        exec(f'self.le{self.nentdownmap}2vb3.setStyleSheet("background-color:#E8E8E8;")')
        exec(f'self.le{self.nentdownmap}2vb3.setFixedWidth(30)')
        exec(f'self.grid3.addWidget(self.le{self.nentdownmap}2vb3,self.nentdownmap,3)')
        exec(f'self.le{self.nentdownmap}3vb3 = QLineEdit()')
        exec(f'self.le{self.nentdownmap}3vb3.setStyleSheet("background-color:#E8E8E8;")')
        exec(f'self.le{self.nentdownmap}3vb3.setFixedWidth(30)')
        exec(f'self.grid3.addWidget(self.le{self.nentdownmap}3vb3,self.nentdownmap,4)')
        exec(f'self.le{self.nentdownmap}4vb3 = QLineEdit()')
        exec(f'self.le{self.nentdownmap}4vb3.setStyleSheet("background-color:#E8E8E8;")')
        exec(f'self.le{self.nentdownmap}4vb3.setFixedWidth(20)')
        exec(f'self.grid3.addWidget(self.le{self.nentdownmap}4vb3,self.nentdownmap,5)')
        exec(f'self.le{self.nentdownmap}5vb3 = QLineEdit()')
        exec(f'self.le{self.nentdownmap}5vb3.setStyleSheet("background-color:#E8E8E8;")')
        exec(f'self.le{self.nentdownmap}5vb3.setFixedWidth(30)')
        exec(f'self.grid3.addWidget(self.le{self.nentdownmap}5vb3,self.nentdownmap,6)')
        exec(f'self.le{self.nentdownmap}6vb3 = QLineEdit()')
        exec(f'self.le{self.nentdownmap}6vb3.setStyleSheet("background-color:#E8E8E8;")')
        exec(f'self.le{self.nentdownmap}6vb3.setFixedWidth(30)')
        exec(f'self.grid3.addWidget(self.le{self.nentdownmap}6vb3,self.nentdownmap,7)')
        self.nentdownmap = self.nentdownmap + 1

    def bhb3vb4hb3_clicked(self):
        exec(f'self.cb{self.nentrightmap}vb4 = QCheckBox()')
        exec(f'self.cb{self.nentrightmap}vb4.setStyleSheet("QCheckBox::indicator {{ width : 10px; height : 10px;}}")')
        exec(f'self.cb{self.nentrightmap}vb4.setToolTip("Select to make this entity static")')
        exec(f'self.grid4.addWidget(self.cb{self.nentrightmap}vb4,self.nentrightmap,0)')
        exec(f'self.l{self.nentrightmap}vb4 = QLabel("{self.nentrightmap}")')
        exec(f'self.l{self.nentrightmap}vb4.setFixedWidth(20)')
        exec(f'self.grid4.addWidget(self.l{self.nentrightmap}vb4,self.nentrightmap,1)')
        exec(f'self.le{self.nentrightmap}1vb4 = QLineEdit()')
        exec(f'self.le{self.nentrightmap}1vb4.setStyleSheet("background-color:#E8E8E8;")')
        exec(f'self.le{self.nentrightmap}1vb4.setFixedWidth(127)')
        exec(f'self.grid4.addWidget(self.le{self.nentrightmap}1vb4,self.nentrightmap,2)')
        exec(f'self.le{self.nentrightmap}2vb4 = QLineEdit()')
        exec(f'self.le{self.nentrightmap}2vb4.setStyleSheet("background-color:#E8E8E8;")')
        exec(f'self.le{self.nentrightmap}2vb4.setFixedWidth(30)')
        exec(f'self.grid4.addWidget(self.le{self.nentrightmap}2vb4,self.nentrightmap,3)')
        exec(f'self.le{self.nentrightmap}3vb4 = QLineEdit()')
        exec(f'self.le{self.nentrightmap}3vb4.setStyleSheet("background-color:#E8E8E8;")')
        exec(f'self.le{self.nentrightmap}3vb4.setFixedWidth(30)')
        exec(f'self.grid4.addWidget(self.le{self.nentrightmap}3vb4,self.nentrightmap,4)')
        exec(f'self.le{self.nentrightmap}4vb4 = QLineEdit()')
        exec(f'self.le{self.nentrightmap}4vb4.setStyleSheet("background-color:#E8E8E8;")')
        exec(f'self.le{self.nentrightmap}4vb4.setFixedWidth(20)')
        exec(f'self.grid4.addWidget(self.le{self.nentrightmap}4vb4,self.nentrightmap,5)')
        exec(f'self.le{self.nentrightmap}5vb4 = QLineEdit()')
        exec(f'self.le{self.nentrightmap}5vb4.setStyleSheet("background-color:#E8E8E8;")')
        exec(f'self.le{self.nentrightmap}5vb4.setFixedWidth(30)')
        exec(f'self.grid4.addWidget(self.le{self.nentrightmap}5vb4,self.nentrightmap,6)')
        exec(f'self.le{self.nentrightmap}6vb4 = QLineEdit()')
        exec(f'self.le{self.nentrightmap}6vb4.setStyleSheet("background-color:#E8E8E8;")')
        exec(f'self.le{self.nentrightmap}6vb4.setFixedWidth(30)')
        exec(f'self.grid4.addWidget(self.le{self.nentrightmap}6vb4,self.nentrightmap,7)')
        self.nentrightmap = self.nentrightmap + 1

    def bhb3vb5hb3_clicked(self):
        exec(f'self.cb{self.nentupmap}vb5 = QCheckBox()')
        exec(f'self.cb{self.nentupmap}vb5.setStyleSheet("QCheckBox::indicator {{ width : 10px; height : 10px;}}")')
        exec(f'self.cb{self.nentupmap}vb5.setToolTip("Select to make this entity static")')
        exec(f'self.grid5.addWidget(self.cb{self.nentupmap}vb5,self.nentupmap,0)')
        exec(f'self.l{self.nentupmap}vb5 = QLabel("{self.nentupmap}")')
        exec(f'self.l{self.nentupmap}vb5.setFixedWidth(20)')
        exec(f'self.grid5.addWidget(self.l{self.nentupmap}vb5,self.nentupmap,1)')
        exec(f'self.le{self.nentupmap}1vb5 = QLineEdit()')
        exec(f'self.le{self.nentupmap}1vb5.setStyleSheet("background-color:#E8E8E8;")')
        exec(f'self.le{self.nentupmap}1vb5.setFixedWidth(127)')
        exec(f'self.grid5.addWidget(self.le{self.nentupmap}1vb5,self.nentupmap,2)')
        exec(f'self.le{self.nentupmap}2vb5 = QLineEdit()')
        exec(f'self.le{self.nentupmap}2vb5.setStyleSheet("background-color:#E8E8E8;")')
        exec(f'self.le{self.nentupmap}2vb5.setFixedWidth(30)')
        exec(f'self.grid5.addWidget(self.le{self.nentupmap}2vb5,self.nentupmap,3)')
        exec(f'self.le{self.nentupmap}3vb5 = QLineEdit()')
        exec(f'self.le{self.nentupmap}3vb5.setStyleSheet("background-color:#E8E8E8;")')
        exec(f'self.le{self.nentupmap}3vb5.setFixedWidth(30)')
        exec(f'self.grid5.addWidget(self.le{self.nentupmap}3vb5,self.nentupmap,4)')
        exec(f'self.le{self.nentupmap}4vb5 = QLineEdit()')
        exec(f'self.le{self.nentupmap}4vb5.setStyleSheet("background-color:#E8E8E8;")')
        exec(f'self.le{self.nentupmap}4vb5.setFixedWidth(20)')
        exec(f'self.grid5.addWidget(self.le{self.nentupmap}4vb5,self.nentupmap,5)')
        exec(f'self.le{self.nentupmap}5vb5 = QLineEdit()')
        exec(f'self.le{self.nentupmap}5vb5.setStyleSheet("background-color:#E8E8E8;")')
        exec(f'self.le{self.nentupmap}5vb5.setFixedWidth(30)')
        exec(f'self.grid5.addWidget(self.le{self.nentupmap}5vb5,self.nentupmap,6)')
        exec(f'self.le{self.nentupmap}6vb5 = QLineEdit()')
        exec(f'self.le{self.nentupmap}6vb5.setStyleSheet("background-color:#E8E8E8;")')
        exec(f'self.le{self.nentupmap}6vb5.setFixedWidth(30)')
        exec(f'self.grid5.addWidget(self.le{self.nentupmap}6vb5,self.nentupmap,7)')
        self.nentupmap = self.nentupmap + 1

    def all_le_not_empty(self):
        if self.le1hb1.text().strip() == "":
            return False
        if self.le1hb2.text().strip() == "":
            return False
        # vb1
        if self.lehb1vb1hb3.text().strip() == "":
            return False
        if self.lehb2vb1hb3.text().strip() == "":
            return False
        for i in range(self.nentcentralmap):
            if eval(f'self.le{i}1vb1.text().strip()') == "":
                return False
            if eval(f'self.le{i}2vb1.text().strip()') == "":
                return False
            if eval(f'self.le{i}3vb1.text().strip()') == "":
                return False
            if eval(f'self.le{i}4vb1.text().strip()') == "":
                return False
            if eval(f'self.le{i}5vb1.text().strip()') == "":
                return False
            if eval(f'self.le{i}6vb1.text().strip()') == "":
                return False
        # vb2
        if self.lehb0vb2hb3.text().strip() != "":
            if self.lehb1vb2hb3.text().strip() == "":
                return False
            if self.lehb2vb2hb3.text().strip() == "":
                return False
            if self.lehb3vb2hb3.text().strip() == "":
                return False
            for i in range(self.nentleftmap):
                if eval(f'self.le{i}1vb2.text().strip()') == "":
                    return False
                if eval(f'self.le{i}2vb2.text().strip()') == "":
                    return False
                if eval(f'self.le{i}3vb2.text().strip()') == "":
                    return False
                if eval(f'self.le{i}4vb2.text().strip()') == "":
                    return False
                if eval(f'self.le{i}5vb2.text().strip()') == "":
                    return False
                if eval(f'self.le{i}6vb2.text().strip()') == "":
                    return False
        # vb3
        if self.lehb0vb3hb3.text().strip() != "":
            if self.lehb1vb3hb3.text().strip() == "":
                return False
            if self.lehb2vb3hb3.text().strip() == "":
                return False
            if self.lehb3vb3hb3.text().strip() == "":
                return False
            for i in range(self.nentdownmap):
                if eval(f'self.le{i}1vb3.text().strip()') == "":
                    return False
                if eval(f'self.le{i}2vb3.text().strip()') == "":
                    return False
                if eval(f'self.le{i}3vb3.text().strip()') == "":
                    return False
                if eval(f'self.le{i}4vb3.text().strip()') == "":
                    return False
                if eval(f'self.le{i}5vb3.text().strip()') == "":
                    return False
                if eval(f'self.le{i}6vb3.text().strip()') == "":
                    return False
        # vb4
        if self.lehb0vb4hb3.text().strip() != "":
            if self.lehb1vb4hb3.text().strip() == "":
                return False
            if self.lehb2vb4hb3.text().strip() == "":
                return False
            if self.lehb3vb4hb3.text().strip() == "":
                return False
            for i in range(self.nentrightmap):
                if eval(f'self.le{i}1vb4.text().strip()') == "":
                    return False
                if eval(f'self.le{i}2vb4.text().strip()') == "":
                    return False
                if eval(f'self.le{i}3vb4.text().strip()') == "":
                    return False
                if eval(f'self.le{i}4vb4.text().strip()') == "":
                    return False
                if eval(f'self.le{i}5vb4.text().strip()') == "":
                    return False
                if eval(f'self.le{i}6vb4.text().strip()') == "":
                    return False
        # vb5
        if self.lehb0vb5hb3.text().strip() != "":
            if self.lehb1vb5hb3.text().strip() == "":
                return False
            if self.lehb2vb5hb3.text().strip() == "":
                return False
            if self.lehb3vb5hb3.text().strip() == "":
                return False
            for i in range(self.nentupmap):
                if eval(f'self.le{i}1vb5.text().strip()') == "":
                    return False
                if eval(f'self.le{i}2vb5.text().strip()') == "":
                    return False
                if eval(f'self.le{i}3vb5.text().strip()') == "":
                    return False
                if eval(f'self.le{i}4vb5.text().strip()') == "":
                    return False
                if eval(f'self.le{i}5vb5.text().strip()') == "":
                    return False
                if eval(f'self.le{i}6vb5.text().strip()') == "":
                    return False
        return True

    def save(self):
        if not self.all_le_not_empty():
            print("Qualche LineEdit è vuoto!\a")
            return
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        fileName, _ = QFileDialog.getSaveFileName(self,"QFileDialog.getSaveFileName()",f"{self.le1hb1.text().strip()}.lua","All Files (*);;Text Files (*.txt)", options=options)
        # fileName = f"../{self.le1hb1.text().strip()}.lua"
        self.make_lua_file(fileName)
        print(f"File saved: {fileName}")

    def make_lua_file(self,file_name):
        f = open(file_name,"w") 
        f.write("-- This file has been created by an automatic tool generator.\n")
        f.write("-- The following table's fields has been setted:\n")
        f.write("--   - layer = 1\n")
        f.write("--   - isMainInMap = true\n")
        f.write("--   - textureAssetId = scientist-texture\n")
        f.write("--   - textureAssetId = pallet-town-player-home (per quelle con staticTransform e staticSprite components)\n")
        f.write("--   - animated = true\n")
        f.write("--   - frameCount = 4\n")
        f.write("--   - hasDirections = true\n")
        f.write("--   - fixed = false\n")
        f.write("--   - maxRndFrequency = 800\n")
        f.write("--   - minRndFrequency = 60\n")
        f.write("--   - bounds have black color and an offset of 1\n")
        f.write("-- Change them to customize the location.\n")
        f.write("\n")
        f.write("home = \"../HOME\"\n")
        f.write("\n")
        f.write(f"stepSize = {self.le1hb2.text().strip()}\n")
        f.write("\n")
        f.write(f"hMap = {self.lehb1vb1hb3.text().strip()}\n")
        f.write(f"wMap = {self.lehb2vb1hb3.text().strip()}\n")
        f.write("\n")
        if self.lehb0vb2hb3.text().strip() != "":
            f.write(f"hMapLeft = {self.lehb1vb2hb3.text().strip()}\n")
            f.write(f"wMapLeft = {self.lehb2vb2hb3.text().strip()}\n")
            f.write(f"yOffLeft = {self.lehb3vb2hb3.text().strip()}\n")
        f.write("\n")
        if self.lehb0vb3hb3.text().strip() != "":
            f.write(f"hMapDown = {self.lehb1vb3hb3.text().strip()}\n")
            f.write(f"wMapDown = {self.lehb2vb3hb3.text().strip()}\n")
            f.write(f"xOffDown = {self.lehb3vb3hb3.text().strip()}\n")
        f.write("\n")
        if self.lehb0vb4hb3.text().strip() != "":
            f.write(f"hMapRight = {self.lehb1vb4hb3.text().strip()}\n")
            f.write(f"wMapRight = {self.lehb2vb4hb3.text().strip()}\n")
            f.write(f"yOffRight = {self.lehb3vb4hb3.text().strip()}\n")
        f.write("\n")
        if self.lehb0vb5hb3.text().strip() != "":
            f.write(f"hMapUp = {self.lehb1vb5hb3.text().strip()}\n")
            f.write(f"wMapUp = {self.lehb2vb5hb3.text().strip()}\n")
            f.write(f"xOffUp = {self.lehb3vb5hb3.text().strip()}\n")
        f.write("\n")
        for i in range(self.nentcentralmap):
            name = eval(f'self.le{i}1vb1.text().strip()')
            x = eval(f'self.le{i}2vb1.text().strip()')
            y = eval(f'self.le{i}3vb1.text().strip()')
            i = eval(f'self.le{i}4vb1.text().strip()')
            f.write(f"{name}PosX,{name}PosY,{name}IndexAnim = {x}*stepSize,{y}*stepSize,{i}\n")
        f.write(f"f = io.open(home..\"/.pkmnrcc/tsav/{self.le1hb1.text().strip()}.tsav\",\"r\")\n")
        f.write("if f ~= nil then\n")
        f.write("    t = {}\n")
        f.write(f"    for line in io.lines(home..\"/.pkmnrcc/tsav/{self.le1hb1.text().strip()}.tsav\") do\n")
        f.write("        for k, v in string.gmatch(line, \"(%w+)=(%w+)\") do\n")
        f.write("           t[k] = v\n")
        f.write("        end\n")
        f.write("    end\n")
        for i in range(self.nentcentralmap):
            bool_flag = eval(f'self.cb{i}vb1.isChecked()')
            if not bool_flag:
                name = eval(f'self.le{i}1vb1.text().strip()')
                x = eval(f'self.le{i}2vb1.text().strip()')
                y = eval(f'self.le{i}3vb1.text().strip()')
                i = eval(f'self.le{i}4vb1.text().strip()')
                f.write(f"    {name}PosX,{name}PosY,{name}IndexAnim = stepSize*tonumber(t[\"{name}PosX\"]),stepSize*tonumber(t[\"{name}PosY\"]),tonumber(t[\"{name}IndexAnim\"])\n")
        f.write("    io.close(f)\n")
        f.write("end\n")
        f.write("\n")
        if self.lehb0vb2hb3.text().strip() != "":
            for i in range(self.nentleftmap):
                name = eval(f'self.le{i}1vb2.text().strip()')
                x = eval(f'self.le{i}2vb2.text().strip()')
                y = eval(f'self.le{i}3vb2.text().strip()')
                i = eval(f'self.le{i}4vb2.text().strip()')
                f.write(f"{name}PosX,{name}PosY,{name}IndexAnim = ({x}-wMapLeft)*stepSize,({y}+yOffLeft)*stepSize,{i}\n")
            f.write(f"f = io.open(home..\"/.pkmnrcc/tsav/{self.lehb0vb2hb3.text().strip()}.tsav\",\"r\")\n")
            f.write("if f ~= nil then\n")
            f.write("    t = {}\n")
            f.write(f"    for line in io.lines(home..\"/.pkmnrcc/tsav/{self.lehb0vb2hb3.text().strip()}.tsav\") do\n")
            f.write("        for k, v in string.gmatch(line, \"(%w+)=(%w+)\") do\n")
            f.write("           t[k] = v\n")
            f.write("        end\n")
            f.write("    end\n")
            for i in range(self.nentleftmap):
                bool_flag = eval(f'self.cb{i}vb2.isChecked()')
                if not bool_flag:
                    name = eval(f'self.le{i}1vb2.text().strip()')
                    x = eval(f'self.le{i}2vb2.text().strip()')
                    y = eval(f'self.le{i}3vb2.text().strip()')
                    i = eval(f'self.le{i}4vb2.text().strip()')
                    f.write(f"    {name}PosX,{name}PosY,{name}IndexAnim = stepSize*(tonumber(t[\"{name}PosX\"])-wMapLeft),stepSize*(tonumber(t[\"{name}PosY\"])+yOffLeft),tonumber(t[\"{name}IndexAnim\"])\n")
            f.write("    io.close(f)\n")
            f.write("end\n")
        f.write("\n")
        if self.lehb0vb3hb3.text().strip() != "":
            for i in range(self.nentdownmap):
                name = eval(f'self.le{i}1vb3.text().strip()')
                x = eval(f'self.le{i}2vb3.text().strip()')
                y = eval(f'self.le{i}3vb3.text().strip()')
                i = eval(f'self.le{i}4vb3.text().strip()')
                f.write(f"{name}PosX,{name}PosY,{name}IndexAnim = ({x}+xOffDown)*stepSize,({y}+hMap)*stepSize,{i}\n")
            f.write(f"f = io.open(home..\"/.pkmnrcc/tsav/{self.lehb0vb3hb3.text().strip()}.tsav\",\"r\")\n")
            f.write("if f ~= nil then\n")
            f.write("    t = {}\n")
            f.write(f"    for line in io.lines(home..\"/.pkmnrcc/tsav/{self.lehb0vb3hb3.text().strip()}.tsav\") do\n")
            f.write("        for k, v in string.gmatch(line, \"(%w+)=(%w+)\") do\n")
            f.write("           t[k] = v\n")
            f.write("        end\n")
            f.write("    end\n")
            for i in range(self.nentdownmap):
                bool_flag = eval(f'self.cb{i}vb3.isChecked()')
                if not bool_flag:
                    name = eval(f'self.le{i}1vb3.text().strip()')
                    x = eval(f'self.le{i}2vb3.text().strip()')
                    y = eval(f'self.le{i}3vb3.text().strip()')
                    i = eval(f'self.le{i}4vb3.text().strip()')
                    f.write(f"    {name}PosX,{name}PosY,{name}IndexAnim = stepSize*(tonumber(t[\"{name}PosX\"])+xOffDown),stepSize*(tonumber(t[\"{name}PosY\"])+hMap),tonumber(t[\"{name}IndexAnim\"])\n")
            f.write("    io.close(f)\n")
            f.write("end\n")
        f.write("\n")
        if self.lehb0vb4hb3.text().strip() != "":
            for i in range(self.nentrightmap):
                name = eval(f'self.le{i}1vb4.text().strip()')
                x = eval(f'self.le{i}2vb4.text().strip()')
                y = eval(f'self.le{i}3vb4.text().strip()')
                i = eval(f'self.le{i}4vb4.text().strip()')
                f.write(f"{name}PosX,{name}PosY,{name}IndexAnim = ({x}+wMap)*stepSize,({y}+yOffRight)*stepSize,{i}\n")
            f.write(f"f = io.open(home..\"/.pkmnrcc/tsav/{self.lehb0vb4hb3.text().strip()}.tsav\",\"r\")\n")
            f.write("if f ~= nil then\n")
            f.write("    t = {}\n")
            f.write(f"    for line in io.lines(home..\"/.pkmnrcc/tsav/{self.lehb0vb4hb3.text().strip()}.tsav\") do\n")
            f.write("        for k, v in string.gmatch(line, \"(%w+)=(%w+)\") do\n")
            f.write("           t[k] = v\n")
            f.write("        end\n")
            f.write("    end\n")
            for i in range(self.nentrightmap):
                bool_flag = eval(f'self.cb{i}vb4.isChecked()')
                if not bool_flag:
                    name = eval(f'self.le{i}1vb4.text().strip()')
                    x = eval(f'self.le{i}2vb4.text().strip()')
                    y = eval(f'self.le{i}3vb4.text().strip()')
                    i = eval(f'self.le{i}4vb4.text().strip()')
                    f.write(f"    {name}PosX,{name}PosY,{name}IndexAnim = stepSize*(tonumber(t[\"{name}PosX\"])+wMap),stepSize*(tonumber(t[\"{name}PosY\"])+yOffRight),tonumber(t[\"{name}IndexAnim\"])\n")
            f.write("    io.close(f)\n")
            f.write("end\n")
        f.write("\n")
        if self.lehb0vb5hb3.text().strip() != "":
            for i in range(self.nentupmap):
                name = eval(f'self.le{i}1vb5.text().strip()')
                x = eval(f'self.le{i}2vb5.text().strip()')
                y = eval(f'self.le{i}3vb5.text().strip()')
                i = eval(f'self.le{i}4vb5.text().strip()')
                f.write(f"{name}PosX,{name}PosY,{name}IndexAnim = ({x}+xOffUp)*stepSize,({y}-hMapUp)*stepSize,{i}\n")
            f.write(f"f = io.open(home..\"/.pkmnrcc/tsav/{self.lehb0vb5hb3.text().strip()}.tsav\",\"r\")\n")
            f.write("if f ~= nil then\n")
            f.write("    t = {}\n")
            f.write(f"    for line in io.lines(home..\"/.pkmnrcc/tsav/{self.lehb0vb5hb3.text().strip()}.tsav\") do\n")
            f.write("        for k, v in string.gmatch(line, \"(%w+)=(%w+)\") do\n")
            f.write("           t[k] = v\n")
            f.write("        end\n")
            f.write("    end\n")
            for i in range(self.nentupmap):
                bool_flag = eval(f'self.cb{i}vb5.isChecked()')
                if not bool_flag:
                    name = eval(f'self.le{i}1vb5.text().strip()')
                    x = eval(f'self.le{i}2vb5.text().strip()')
                    y = eval(f'self.le{i}3vb5.text().strip()')
                    i = eval(f'self.le{i}4vb5.text().strip()')
                    f.write(f"    {name}PosX,{name}PosY,{name}IndexAnim = stepSize*(tonumber(t[\"{name}PosX\"])+xOffUp),stepSize*(tonumber(t[\"{name}PosY\"])-hMapUp),tonumber(t[\"{name}IndexAnim\"])\n")
            f.write("    io.close(f)\n")
            f.write("end\n")
        ################################ begin table
        f.write("\n")
        f.write(f"{self.le1hb1.text().strip()} = {{\n")
        f.write("    assets = {\n")
        f.write("    },\n")
        f.write("    map = {\n")
        f.write(f"        name = \"{self.le1hb1.text().strip()}\",\n")
        f.write(f"        file = \"../assets/tilemaps/{self.le1hb1.text().strip()}\",\n")
        f.write("        mapSizeX = wMap,\n")
        f.write("        mapSizeY = hMap\n")
        f.write("    },\n")
        if self.lehb0vb5hb3.text().strip() != "":
            f.write("    mapUp = {\n")
            f.write(f"        name = \"{self.lehb0vb5hb3.text().strip()}\",\n")
            f.write(f"        file = \"../assets/tilemaps/{self.lehb0vb5hb3.text().strip()}\",\n")
            f.write("        mapSizeX = wMapUp,\n")
            f.write("        mapSizeY = hMapUp,\n")
            f.write("        xOff = xOffUp * stepSize\n")
            f.write("    },\n")
        if self.lehb0vb2hb3.text().strip() != "":
            f.write("    mapLeft = {\n")
            f.write(f"        name = \"{self.lehb0vb2hb3.text().strip()}\",\n")
            f.write(f"        file = \"../assets/tilemaps/{self.lehb0vb2hb3.text().strip()}\",\n")
            f.write("        mapSizeX = wMapLeft,\n")
            f.write("        mapSizeY = hMapLeft,\n")
            f.write("        yOff = yOffLeft * stepSize\n")
            f.write("    },\n")
        if self.lehb0vb3hb3.text().strip() != "":
            f.write("    mapDown = {\n")
            f.write(f"        name = \"{self.lehb0vb3hb3.text().strip()}\",\n")
            f.write(f"        file = \"../assets/tilemaps/{self.lehb0vb3hb3.text().strip()}\",\n")
            f.write("        mapSizeX = wMapDown,\n")
            f.write("        mapSizeY = hMapDown,\n")
            f.write("        xOff = xOffDown * stepSize\n")
            f.write("    },\n")
        if self.lehb0vb4hb3.text().strip() != "":
            f.write("    mapRight = {\n")
            f.write(f"        name = \"{self.lehb0vb4hb3.text().strip()}\",\n")
            f.write(f"        file = \"../assets/tilemaps/{self.lehb0vb4hb3.text().strip()}\",\n")
            f.write("        mapSizeX = wMapRight,\n")
            f.write("        mapSizeY = hMapRight,\n")
            f.write("        yOff = yOffRight * stepSize\n")
            f.write("    },\n")
        f.write("    entities = {\n")
        tot_ent = 0
        for i in range(self.nentcentralmap):
            name = eval(f'self.le{i}1vb1.text().strip()')
            x = eval(f'self.le{i}2vb1.text().strip()')
            y = eval(f'self.le{i}3vb1.text().strip()')
            w = eval(f'self.le{i}5vb1.text().strip()')
            h = eval(f'self.le{i}6vb1.text().strip()')
            bool_flag = eval(f'self.cb{i}vb1.isChecked()')
            if not bool_flag:
                f.write(f"        [{tot_ent+int(i)}] = {{\n")
                f.write(f"            name = \"{name}\",\n")
                f.write("            layer = 1,\n")
                f.write("            isMainInMap = true,\n")
                f.write("            components = {\n")
                f.write("                transform = {\n")
                f.write("                    position = {\n")
                f.write(f"                        x = {name}PosX,\n")
                f.write(f"                        y = {name}PosY\n")
                f.write("                    },\n")
                f.write(f"                    width = {w}/2,\n")
                f.write(f"                    height = {h}/2,\n")
                f.write("                    scale = 2,\n")
                f.write("                    velocitySize = 1\n")
                f.write("                },\n")
                f.write("                sprite = {\n")
                f.write("                    textureAssetId = \"scientist-texture\",\n")
                f.write("                    animated = true,\n")
                f.write("                    frameCount = 4,\n")
                f.write("                    hasDirections = true,\n")
                f.write("                    fixed = false,\n")
                f.write(f"                    animationIndex = {name}IndexAnim\n")
                f.write("                },\n")
                f.write("                randInput = {\n")
                f.write("                    maxRndFrequency = 800,\n")
                f.write("                    minRndFrequency = 60\n")
                f.write("                },\n")
                f.write("                bound = {\n")
                f.write(f"                    xLeft = {int(x)-1},\n")
                f.write(f"                    xRight = {int(x)+1},\n")
                f.write(f"                    yUp = {int(y)-1},\n")
                f.write(f"                    yDown = {int(y)+1},\n")
                f.write("                    color = {\n")
                f.write("                        r = 0,\n")
                f.write("                        g = 0,\n")
                f.write("                        b = 0,\n")
                f.write("                        a = 255\n")
                f.write("                    },\n")
                f.write("                    fontFamily = \"charriot-14pt\"\n")
                f.write("                }\n")
                f.write("            }\n")
                f.write("        },\n")
            else:
                f.write(f"        [{tot_ent+int(i)}] = {{\n")
                f.write(f"            name = \"{name}\",\n")
                f.write("            layer = 0,\n")
                f.write("            isMainInMap = true,\n")
                f.write("            components = {\n")
                f.write("                staticTransform = {\n")
                f.write("                    position = {\n")
                f.write(f"                        x = {name}PosX,\n")
                f.write(f"                        y = {name}PosY\n")
                f.write("                    },\n")
                f.write(f"                    width = {w}/2,\n")
                f.write(f"                    height = {h}/2,\n")
                f.write("                    scale = 2,\n")
                f.write("                },\n")
                f.write("                staticSprite = {\n")
                f.write("                    textureAssetId = \"pallet-town-player-home\",\n")
                f.write("                    fixed = false,\n")
                f.write(f"                    animationIndex = 0\n")
                f.write("                }\n")
                f.write("            }\n")
                f.write("        },\n")
        tot_ent = tot_ent + self.nentcentralmap
        if self.lehb0vb2hb3.text().strip() != "":
            f.write("-- ADJACIENT MAPS SHOW CHARACTERS    -    left\n")
            for i in range(self.nentleftmap):
                name = eval(f'self.le{i}1vb2.text().strip()')
                w = eval(f'self.le{i}5vb2.text().strip()')
                h = eval(f'self.le{i}6vb2.text().strip()')
                bool_flag = eval(f'self.cb{i}vb2.isChecked()')
                if not bool_flag:
                    f.write(f"        [{tot_ent+int(i)}] = {{\n")
                    f.write(f"            name = \"{name}\",\n")
                    f.write("            layer = 1,\n")
                    f.write("            components = {\n")
                    f.write("                staticTransform = {\n")
                    f.write("                    position = {\n")
                    f.write(f"                        x = {name}PosX,\n")
                    f.write(f"                        y = {name}PosY\n")
                    f.write("                    },\n")
                    f.write(f"                    width = {w}/2,\n")
                    f.write(f"                    height = {h}/2,\n")
                    f.write("                    scale = 2\n")
                    f.write("                },\n")
                    f.write("                staticSprite = {\n")
                    f.write("                    textureAssetId = \"scientist-texture\",\n")
                    f.write("                    fixed = false,\n")
                    f.write(f"                    animationIndex = {name}IndexAnim\n")
                    f.write("                }\n")
                    f.write("            }\n")
                    f.write("        },\n")
                else:
                    f.write(f"        [{tot_ent+int(i)}] = {{\n")
                    f.write(f"            name = \"{name}\",\n")
                    f.write("            layer = 0,\n")
                    f.write("            components = {\n")
                    f.write("                staticTransform = {\n")
                    f.write("                    position = {\n")
                    f.write(f"                        x = {name}PosX,\n")
                    f.write(f"                        y = {name}PosY\n")
                    f.write("                    },\n")
                    f.write(f"                    width = {w}/2,\n")
                    f.write(f"                    height = {h}/2,\n")
                    f.write("                    scale = 2\n")
                    f.write("                },\n")
                    f.write("                staticSprite = {\n")
                    f.write("                    textureAssetId = \"pallet-town-player-home\",\n")
                    f.write("                    fixed = false,\n")
                    f.write(f"                    animationIndex = 0\n")
                    f.write("                }\n")
                    f.write("            }\n")
                    f.write("        },\n")
        tot_ent = tot_ent + self.nentleftmap
        if self.lehb0vb3hb3.text().strip() != "":
            f.write("-- ADJACIENT MAPS SHOW CHARACTERS    -    down\n")
            for i in range(self.nentdownmap):
                name = eval(f'self.le{i}1vb3.text().strip()')
                w = eval(f'self.le{i}5vb3.text().strip()')
                h = eval(f'self.le{i}6vb3.text().strip()')
                bool_flag = eval(f'self.cb{i}vb3.isChecked()')
                if not bool_flag:
                    f.write(f"        [{tot_ent+int(i)}] = {{\n")
                    f.write(f"            name = \"{name}\",\n")
                    f.write("            layer = 1,\n")
                    f.write("            components = {\n")
                    f.write("                staticTransform = {\n")
                    f.write("                    position = {\n")
                    f.write(f"                        x = {name}PosX,\n")
                    f.write(f"                        y = {name}PosY\n")
                    f.write("                    },\n")
                    f.write(f"                    width = {w}/2,\n")
                    f.write(f"                    height = {h}/2,\n")
                    f.write("                    scale = 2\n")
                    f.write("                },\n")
                    f.write("                staticSprite = {\n")
                    f.write("                    textureAssetId = \"scientist-texture\",\n")
                    f.write("                    fixed = false,\n")
                    f.write(f"                    animationIndex = {name}IndexAnim\n")
                    f.write("                }\n")
                    f.write("            }\n")
                    f.write("        },\n")
                else:
                    f.write(f"        [{tot_ent+int(i)}] = {{\n")
                    f.write(f"            name = \"{name}\",\n")
                    f.write("            layer = 0,\n")
                    f.write("            components = {\n")
                    f.write("                staticTransform = {\n")
                    f.write("                    position = {\n")
                    f.write(f"                        x = {name}PosX,\n")
                    f.write(f"                        y = {name}PosY\n")
                    f.write("                    },\n")
                    f.write(f"                    width = {w}/2,\n")
                    f.write(f"                    height = {h}/2,\n")
                    f.write("                    scale = 2\n")
                    f.write("                },\n")
                    f.write("                staticSprite = {\n")
                    f.write("                    textureAssetId = \"pallet-town-player-home\",\n")
                    f.write("                    fixed = false,\n")
                    f.write(f"                    animationIndex = 0\n")
                    f.write("                }\n")
                    f.write("            }\n")
                    f.write("        },\n")
        tot_ent = tot_ent + self.nentdownmap
        if self.lehb0vb4hb3.text().strip() != "":
            f.write("-- ADJACIENT MAPS SHOW CHARACTERS    -    right\n")
            for i in range(self.nentrightmap):
                name = eval(f'self.le{i}1vb4.text().strip()')
                w = eval(f'self.le{i}5vb4.text().strip()')
                h = eval(f'self.le{i}6vb4.text().strip()')
                bool_flag = eval(f'self.cb{i}vb4.isChecked()')
                if not bool_flag:
                    f.write(f"        [{tot_ent+int(i)}] = {{\n")
                    f.write(f"            name = \"{name}\",\n")
                    f.write("            layer = 1,\n")
                    f.write("            components = {\n")
                    f.write("                staticTransform = {\n")
                    f.write("                    position = {\n")
                    f.write(f"                        x = {name}PosX,\n")
                    f.write(f"                        y = {name}PosY\n")
                    f.write("                    },\n")
                    f.write(f"                    width = {w}/2,\n")
                    f.write(f"                    height = {h}/2,\n")
                    f.write("                    scale = 2\n")
                    f.write("                },\n")
                    f.write("                staticSprite = {\n")
                    f.write("                    textureAssetId = \"scientist-texture\",\n")
                    f.write("                    fixed = false,\n")
                    f.write(f"                    animationIndex = {name}IndexAnim\n")
                    f.write("                }\n")
                    f.write("            }\n")
                    f.write("        },\n")
                else:
                    f.write(f"        [{tot_ent+int(i)}] = {{\n")
                    f.write(f"            name = \"{name}\",\n")
                    f.write("            layer = 0,\n")
                    f.write("            components = {\n")
                    f.write("                staticTransform = {\n")
                    f.write("                    position = {\n")
                    f.write(f"                        x = {name}PosX,\n")
                    f.write(f"                        y = {name}PosY\n")
                    f.write("                    },\n")
                    f.write(f"                    width = {w}/2,\n")
                    f.write(f"                    height = {h}/2,\n")
                    f.write("                    scale = 2\n")
                    f.write("                },\n")
                    f.write("                staticSprite = {\n")
                    f.write("                    textureAssetId = \"pallet-town-player-home\",\n")
                    f.write("                    fixed = false,\n")
                    f.write(f"                    animationIndex = 0\n")
                    f.write("                }\n")
                    f.write("            }\n")
                    f.write("        },\n")
        tot_ent = tot_ent + self.nentrightmap
        if self.lehb0vb5hb3.text().strip() != "":
            f.write("-- ADJACIENT MAPS SHOW CHARACTERS    -    up\n")
            for i in range(self.nentupmap):
                name = eval(f'self.le{i}1vb5.text().strip()')
                w = eval(f'self.le{i}5vb5.text().strip()')
                h = eval(f'self.le{i}6vb5.text().strip()')
                bool_flag = eval(f'self.cb{i}vb5.isChecked()')
                if not bool_flag:
                    f.write(f"        [{tot_ent+int(i)}] = {{\n")
                    f.write(f"            name = \"{name}\",\n")
                    f.write("            layer = 1,\n")
                    f.write("            components = {\n")
                    f.write("                staticTransform = {\n")
                    f.write("                    position = {\n")
                    f.write(f"                        x = {name}PosX,\n")
                    f.write(f"                        y = {name}PosY\n")
                    f.write("                    },\n")
                    f.write(f"                    width = {w}/2,\n")
                    f.write(f"                    height = {h}/2,\n")
                    f.write("                    scale = 2\n")
                    f.write("                },\n")
                    f.write("                staticSprite = {\n")
                    f.write("                    textureAssetId = \"scientist-texture\",\n")
                    f.write("                    fixed = false,\n")
                    f.write(f"                    animationIndex = {name}IndexAnim\n")
                    f.write("                }\n")
                    f.write("            }\n")
                    f.write("        },\n")
                else:
                    f.write(f"        [{tot_ent+int(i)}] = {{\n")
                    f.write(f"            name = \"{name}\",\n")
                    f.write("            layer = 0,\n")
                    f.write("            components = {\n")
                    f.write("                staticTransform = {\n")
                    f.write("                    position = {\n")
                    f.write(f"                        x = {name}PosX,\n")
                    f.write(f"                        y = {name}PosY\n")
                    f.write("                    },\n")
                    f.write(f"                    width = {w}/2,\n")
                    f.write(f"                    height = {h}/2,\n")
                    f.write("                    scale = 2\n")
                    f.write("                },\n")
                    f.write("                staticSprite = {\n")
                    f.write("                    textureAssetId = \"pallet-town-player-home\",\n")
                    f.write("                    fixed = false,\n")
                    f.write(f"                    animationIndex = 0\n")
                    f.write("                }\n")
                    f.write("            }\n")
                    f.write("        },\n")
        f.write("    }\n")
        f.write("}\n")
        f.close()

app = QApplication(sys.argv)
screen = Window()
screen.show()
sys.exit(app.exec_())
